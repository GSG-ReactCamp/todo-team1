{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["Itemslist","props","completeIconClass","titleStyle","className","itemsArray","list","handelDelete","handelEdit","handelDone","items","useMemo","map","item","index","isDone","task","type","onClick","id","App","useState","setItemsArray","inputvalue","setInputvalue","btnFunction","setBtnFunction","editindex","setEditindex","textInput","useRef","handleSubmit","newItem","uuidv4","current","focus","edit","newArray","placeholder","onChange","e","target","value","ref","newList","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7f89b37.chunk.js","sourcesContent":["/* eslint-disable linebreak-style */\r\nimport React, { useState, useMemo, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport 'bootstrap-icons/font/bootstrap-icons.css';\r\nimport './App.css';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nfunction Itemslist(props) {\r\n  const {\r\n    className, list: itemsArray, handelDelete, handelEdit, handelDone,\r\n  } = props;\r\n  let completeIconClass;\r\n  let titleStyle;\r\n  const items = useMemo(\r\n    () => itemsArray.map((item, index) => {\r\n      completeIconClass = item.isDone\r\n        ? 'bi-check-circle-fill green'\r\n        : 'bi-check-circle green';\r\n      titleStyle = item.isDone ? 'title done' : 'title';\r\n      return (\r\n        <li\r\n          className=\"list-group-item d-flex justify-content-between align-items-center\"\r\n          key={item.id}\r\n        >\r\n          <span className={titleStyle}>{item.task}</span>\r\n          <span>\r\n            <button type=\"button\" onClick={() => handelDone(index)} data-done>\r\n              <i className={completeIconClass} />\r\n            </button>\r\n            <button type=\"button\" onClick={() => handelEdit(index)} data-edit>\r\n              <i className=\"bi bi-pencil-square blue\" />\r\n            </button>\r\n            <button type=\"button\" onClick={() => handelDelete(item.id)} data-delete>\r\n              <i className=\"bi bi-x-circle red\" index={item.id} />\r\n            </button>\r\n          </span>\r\n        </li>\r\n      );\r\n    }),\r\n    [itemsArray],\r\n  );\r\n  return <ul className={className}>{items}</ul>;\r\n}\r\n\r\nItemslist.propTypes = {\r\n  className: PropTypes.string.isRequired,\r\n  list: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  handelDelete: PropTypes.func.isRequired,\r\n  handelEdit: PropTypes.func.isRequired,\r\n  handelDone: PropTypes.func.isRequired,\r\n\r\n};\r\n\r\nfunction App() {\r\n  const [itemsArray, setItemsArray] = useState([]);\r\n  const [inputvalue, setInputvalue] = useState('');\r\n  const [btnFunction, setBtnFunction] = useState('newItem');\r\n  const [editindex, setEditindex] = useState(-1);\r\n  const textInput = useRef(null);\r\n\r\n  const handelDone = (index) => {\r\n    const newArray = [...itemsArray];\r\n    newArray[index].isDone = !newArray[index].isDone;\r\n    setItemsArray(newArray);\r\n    textInput.current.focus();\r\n  };\r\n\r\n  const handelEdit = (index) => {\r\n    setEditindex(index);\r\n    setBtnFunction('edit');\r\n    setInputvalue(itemsArray[index].task);\r\n    textInput.current.focus();\r\n  };\r\n\r\n  const handelDelete = (id) => {\r\n    const newList = itemsArray.filter((item) => item.id !== id);\r\n    setItemsArray(newList);\r\n    setBtnFunction('newItem'); // in order if the user press edit then delete without submiting new value\r\n    textInput.current.focus();\r\n  };\r\n  const handleChange = (e) => {\r\n    setInputvalue(e.target.value);\r\n  };\r\n  const handleSubmit = {\r\n    newItem() {\r\n      setItemsArray([...itemsArray, { id: uuidv4(), task: inputvalue, isDone: false }]);\r\n      setInputvalue('');\r\n      textInput.current.focus();\r\n    },\r\n    edit() {\r\n      const newArray = [...itemsArray];\r\n      newArray[editindex].task = inputvalue;\r\n      setItemsArray(newArray);\r\n      setBtnFunction('newItem');\r\n      setInputvalue('');\r\n      textInput.current.focus();\r\n    },\r\n\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"add-task\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"todo-input\"\r\n          id=\"input\"\r\n          placeholder=\"Add task...\"\r\n          onChange={handleChange}\r\n          value={inputvalue}\r\n          ref={textInput}\r\n        />\r\n        <button className=\"todo-button\" type=\"submit\" onClick={handleSubmit[btnFunction]}>\r\n          +\r\n        </button>\r\n      </div>\r\n      <section className=\"todo-container\">\r\n        <Itemslist\r\n          className=\"todo-list\"\r\n          list={itemsArray}\r\n          handelDelete={handelDelete}\r\n          handelEdit={handelEdit}\r\n          handelDone={handelDone}\r\n        />\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","/* eslint-disable */\r\nconst reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","/* eslint-disable */\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}